import { createSlice } from '@reduxjs/toolkit';

const randomHexColor = () => {

  const randHex = () => {
    return Math.floor(Math.random * 256).toString(16).padStart(2, '0')
  }
  let r = randHex
  let g = randHex
  let b = randHex
  return '#' + r + g + b
}

const initializer = () => {
  return [randomHexColor(),
          randomHexColor(),
          randomHexColor()]
}

const initialState = {
  colors: initializer(),
}
export const panelsSlice = createSlice({
  name: 'panels',
  initialState,

  reducers: {
    reGenerate: (state) => {
      state.colors = initializer();
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { reGenerate } = panelsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.panels.colors;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default panelsSlice.reducer;
